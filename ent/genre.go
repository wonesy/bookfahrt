// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/wonesy/bookfahrt/ent/genre"
)

// Genre is the model entity for the Genre schema.
type Genre struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GenreQuery when eager-loading is set.
	Edges GenreEdges `json:"edges"`
}

// GenreEdges holds the relations/edges for other nodes in the graph.
type GenreEdges struct {
	// Books holds the value of the books edge.
	Books []*Book `json:"books,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BooksOrErr returns the Books value or an error if the edge
// was not loaded in eager-loading.
func (e GenreEdges) BooksOrErr() ([]*Book, error) {
	if e.loadedTypes[0] {
		return e.Books, nil
	}
	return nil, &NotLoadedError{edge: "books"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Genre) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case genre.FieldID:
			values[i] = new(sql.NullInt64)
		case genre.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Genre", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Genre fields.
func (ge *Genre) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case genre.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ge.ID = int(value.Int64)
		case genre.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ge.Name = value.String
			}
		}
	}
	return nil
}

// QueryBooks queries the "books" edge of the Genre entity.
func (ge *Genre) QueryBooks() *BookQuery {
	return (&GenreClient{config: ge.config}).QueryBooks(ge)
}

// Update returns a builder for updating this Genre.
// Note that you need to call Genre.Unwrap() before calling this method if this Genre
// was returned from a transaction, and the transaction was committed or rolled back.
func (ge *Genre) Update() *GenreUpdateOne {
	return (&GenreClient{config: ge.config}).UpdateOne(ge)
}

// Unwrap unwraps the Genre entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ge *Genre) Unwrap() *Genre {
	tx, ok := ge.config.driver.(*txDriver)
	if !ok {
		panic("ent: Genre is not a transactional entity")
	}
	ge.config.driver = tx.drv
	return ge
}

// String implements the fmt.Stringer.
func (ge *Genre) String() string {
	var builder strings.Builder
	builder.WriteString("Genre(")
	builder.WriteString(fmt.Sprintf("id=%v", ge.ID))
	builder.WriteString(", name=")
	builder.WriteString(ge.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Genres is a parsable slice of Genre.
type Genres []*Genre

func (ge Genres) config(cfg config) {
	for _i := range ge {
		ge[_i].config = cfg
	}
}
