// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/wonesy/bookfahrt/ent/club"
	"github.com/wonesy/bookfahrt/ent/invitation"
	"github.com/wonesy/bookfahrt/ent/user"
)

// Invitation is the model entity for the Invitation schema.
type Invitation struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvitationQuery when eager-loading is set.
	Edges              InvitationEdges `json:"edges"`
	invitation_sponsor *int
	invitation_club    *uuid.UUID
}

// InvitationEdges holds the relations/edges for other nodes in the graph.
type InvitationEdges struct {
	// Sponsor holds the value of the sponsor edge.
	Sponsor *User `json:"sponsor,omitempty"`
	// Club holds the value of the club edge.
	Club *Club `json:"club,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SponsorOrErr returns the Sponsor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvitationEdges) SponsorOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Sponsor == nil {
			// The edge sponsor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Sponsor, nil
	}
	return nil, &NotLoadedError{edge: "sponsor"}
}

// ClubOrErr returns the Club value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvitationEdges) ClubOrErr() (*Club, error) {
	if e.loadedTypes[1] {
		if e.Club == nil {
			// The edge club was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: club.Label}
		}
		return e.Club, nil
	}
	return nil, &NotLoadedError{edge: "club"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Invitation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case invitation.FieldID:
			values[i] = new(uuid.UUID)
		case invitation.ForeignKeys[0]: // invitation_sponsor
			values[i] = new(sql.NullInt64)
		case invitation.ForeignKeys[1]: // invitation_club
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Invitation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Invitation fields.
func (i *Invitation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case invitation.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case invitation.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field invitation_sponsor", value)
			} else if value.Valid {
				i.invitation_sponsor = new(int)
				*i.invitation_sponsor = int(value.Int64)
			}
		case invitation.ForeignKeys[1]:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field invitation_club", values[j])
			} else if value.Valid {
				i.invitation_club = new(uuid.UUID)
				*i.invitation_club = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QuerySponsor queries the "sponsor" edge of the Invitation entity.
func (i *Invitation) QuerySponsor() *UserQuery {
	return (&InvitationClient{config: i.config}).QuerySponsor(i)
}

// QueryClub queries the "club" edge of the Invitation entity.
func (i *Invitation) QueryClub() *ClubQuery {
	return (&InvitationClient{config: i.config}).QueryClub(i)
}

// Update returns a builder for updating this Invitation.
// Note that you need to call Invitation.Unwrap() before calling this method if this Invitation
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Invitation) Update() *InvitationUpdateOne {
	return (&InvitationClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Invitation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Invitation) Unwrap() *Invitation {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Invitation is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Invitation) String() string {
	var builder strings.Builder
	builder.WriteString("Invitation(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Invitations is a parsable slice of Invitation.
type Invitations []*Invitation

func (i Invitations) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
